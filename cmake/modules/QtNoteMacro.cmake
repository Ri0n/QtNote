get_property(result CACHE QTNOTE_VERSION PROPERTY TYPE)
if ("${result}" STREQUAL "")
    if (EXISTS "${CMAKE_SOURCE_DIR}/.git")
        find_package(Git)
        if (Git_FOUND)
            execute_process(COMMAND ${GIT_EXECUTABLE} -C "${CMAKE_SOURCE_DIR}" describe --tags --always
                            OUTPUT_VARIABLE GIT_REPO_VERSION)
            string(STRIP "${GIT_REPO_VERSION}" GIT_REPO_VERSION)
            string(REGEX REPLACE "\.0-" "." GIT_REPO_VERSION ${GIT_REPO_VERSION})
            string(REGEX REPLACE "-.*" "" GIT_REPO_VERSION ${GIT_REPO_VERSION})
            set(QTNOTE_VERSION ${GIT_REPO_VERSION} CACHE STRING "QtNote version string")
        endif()
    else()
        file(READ "${CMAKE_SOURCE_DIR}/version" QTNOTE_VERSION_FILE)
        set(QTNOTE_VERSION ${QTNOTE_VERSION_FILE} CACHE STRING "QtNote version string")
    endif()

    if ("${QTNOTE_VERSION}" STREQUAL "")
        message(WARNING "Failed to find QtNote version. Using 0.0.0")
        set(QTNOTE_VERSION "0.0.0" CACHE STRING "QtNote version string")
    endif()
endif()

function(get_default_plugin_enabled out_var platforms)
    if(APPLE AND macosx IN_LIST platforms)
        set(${out_var} ON PARENT_SCOPE)
    elseif(UNIXLIKE AND unix IN_LIST platforms)
        set(${out_var} ON PARENT_SCOPE)
    elseif(WIN32 AND windows IN_LIST platforms)
        set(${out_var} ON PARENT_SCOPE)
    else()
        set(${out_var} OFF PARENT_SCOPE)
    endif()
endfunction()

macro(add_qtnote_plugin name description)
    cmake_minimum_required(VERSION 3.10.0)
    project(qtnote_plugin_${name} VERSION ${QTNOTE_VERSION} LANGUAGES CXX)
    get_default_plugin_enabled(_def_plugin_enabled "${ARGN}")
    option(QTNOTE_PLUGIN_ENABLE_${name} "Enable QtNote plugin: ${description}" ${_def_plugin_enabled})

    if (NOT QTNOTE_PLUGIN_ENABLE_${name})
        return()
    endif()

    set(CMAKE_AUTOMOC ON)
    set(CMAKE_AUTORCC ON)
    set(CMAKE_AUTOUIC ON)
    set(QTNOTE_COMMON_PLUGIN_SRC
        ${plugins_SOURCE_DIR}/deintegrationinterface.h
        ${plugins_SOURCE_DIR}/qtnoteplugininterface.h
        ${plugins_SOURCE_DIR}/trayimpl.h
        )
    include_directories(${CMAKE_BINARY_DIR} ${plugins_SOURCE_DIR} ${libqtnote_SOURCE_DIR})
    if(WIN32)
        set(EXTRA_LINK_TARGET ${qtnote_lib})
        set(LIB_TYPE "MODULE")
        set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${EXECUTABLE_OUTPUT_PATH}/plugins)
    else()
        set(LIB_TYPE "SHARED")
    endif()
endmacro()
