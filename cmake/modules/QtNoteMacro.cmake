set(QTNOTE_DEFAULT_VERSION 1.0.0)

macro(sanitize_version VERSION PREFIX DEFAULT_VERSION OUT_VAR)
    # try to sanitize version to fit cmake standard
    STRING(REGEX REPLACE "^v?([0-9]+)\\.[0-9]+\\.[0-9]+.*" "\\1" ${PREFIX}_VERSION_MAJOR "${VERSION}")
    STRING(REGEX REPLACE "^v?[0-9]+\\.([0-9])+\\.[0-9]+.*" "\\1" ${PREFIX}_VERSION_MINOR "${VERSION}")
    STRING(REGEX REPLACE "^v?[0-9]+\\.[0-9]+\\.([0-9]+).*" "\\1" ${PREFIX}_VERSION_PATCH "${VERSION}")
    if ("${${PREFIX}_VERSION_MAJOR}" STREQUAL "")
        message(WARNING "Failed to sanitize version ${VERSION}. Falling back to ${DEFAULT_VERSION}")
        set(${OUT_VAR} ${DEFAULT_VERSION})
    else()
        if ("${${PREFIX}_VERSION_MINOR}" STREQUAL "")
            set("${${PREFIX}_VERSION_MINOR}" 0)
        endif()
        if ("${${PREFIX}_VERSION_PATCH}" STREQUAL "")
            set("${${PREFIX}_VERSION_PATCH}" 0)
        endif()
        set(${OUT_VAR} ${${PREFIX}_VERSION_MAJOR}.${${PREFIX}_VERSION_MINOR}.${${PREFIX}_VERSION_PATCH})
    endif()
endmacro()

if (EXISTS "${CMAKE_SOURCE_DIR}/.git")
    find_package(Git)
    if (Git_FOUND)
        # should give x.y.z but we will sanitize anyway
        execute_process(COMMAND ${GIT_EXECUTABLE} -C "${CMAKE_SOURCE_DIR}" describe --tags --always
                        OUTPUT_VARIABLE GIT_REPO_FULL_VERSION)
        string(STRIP "${GIT_REPO_FULL_VERSION}" GIT_REPO_FULL_VERSION)
        sanitize_version(${GIT_REPO_FULL_VERSION} QTNOTE ${QTNOTE_DEFAULT_VERSION} GIT_REPO_VERSION)
        STRING(REGEX REPLACE ".*-([0-9]+)-.*" "\\1" COMMIT_NUMBER "${GIT_REPO_FULL_VERSION}")
        if (NOT "${COMMIT_NUMBER}" STREQUAL "")
            math(EXPR QTNOTE_VERSION_PATCH "${QTNOTE_VERSION_PATCH} + ${COMMIT_NUMBER}" OUTPUT_FORMAT DECIMAL)
            set(GIT_REPO_VERSION ${QTNOTE_VERSION_MAJOR}.${QTNOTE_VERSION_MINOR}.${QTNOTE_VERSION_PATCH})
        endif()
        set(QTNOTE_VERSION ${GIT_REPO_VERSION} CACHE STRING "QtNote version string")
    endif()
else()
    file(READ "${CMAKE_SOURCE_DIR}/version" QTNOTE_VERSION_FILE)
    sanitize_version(${QTNOTE_VERSION_FILE} QTNOTE ${QTNOTE_DEFAULT_VERSION} QTNOTE_VERSION_FILE)
    set(QTNOTE_VERSION ${QTNOTE_VERSION_FILE} CACHE STRING "QtNote version string")
endif()

if ("${QTNOTE_VERSION}" STREQUAL "")
    sanitize_version(${QTNOTE_DEFAULT_VERSION} QTNOTE ${QTNOTE_DEFAULT_VERSION} QTNOTE_VERSION)
    message(WARNING "Failed to find QtNote version. Using ${QTNOTE_VERSION}")
    set(QTNOTE_VERSION "${QTNOTE_VERSION}" CACHE STRING "QtNote version string")
endif()

function(qtnote_platform_has_plugin out_var platforms)
    if(APPLE AND macosx IN_LIST platforms)
        set(${out_var} ON PARENT_SCOPE)
    elseif(UNIXLIKE AND unix IN_LIST platforms)
        set(${out_var} ON PARENT_SCOPE)
    elseif(WIN32 AND windows IN_LIST platforms)
        set(${out_var} ON PARENT_SCOPE)
    else()
        set(${out_var} OFF PARENT_SCOPE)
    endif()
endfunction()

macro(add_qtnote_plugin name description buildable)
    cmake_minimum_required(VERSION 3.10.0)
    project(qtnote_plugin_${name} VERSION ${QTNOTE_VERSION} LANGUAGES CXX)
    qtnote_platform_has_plugin(_def_plugin_enabled "${ARGN}")
    if(${buildable})
        if(${_def_plugin_enabled})
            message(STATUS "PLUGIN ${name} is available on this platform and buildable")
        else()
            message(STATUS "PLUGIN ${name} is disabled on this platform")
        endif()
    else()
        message(STATUS "PLUGIN ${name} is not buildable")
        set(_def_plugin_enabled OFF)
    endif()
    option(QTNOTE_PLUGIN_ENABLE_${name} "Enable QtNote plugin: ${description}" ${_def_plugin_enabled})

    if (NOT QTNOTE_PLUGIN_ENABLE_${name})
        return()
    endif()

    set(CMAKE_AUTOMOC ON)
    set(CMAKE_AUTORCC ON)
    set(CMAKE_AUTOUIC ON)
    set(QTNOTE_COMMON_PLUGIN_SRC
        ${plugins_SOURCE_DIR}/deintegrationinterface.h
        ${plugins_SOURCE_DIR}/qtnoteplugininterface.h
        ${plugins_SOURCE_DIR}/trayimpl.h
        )
    include_directories(${CMAKE_BINARY_DIR} ${plugins_SOURCE_DIR} ${libqtnote_SOURCE_DIR})
    if(WIN32)
        set(EXTRA_LINK_TARGET ${qtnote_lib})
        set(LIB_TYPE "MODULE")
        set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${EXECUTABLE_OUTPUT_PATH}/plugins)
    else()
        set(LIB_TYPE "SHARED")
    endif()
endmacro()

macro(qtnote_optional_pkgconfig)
    find_package(PkgConfig)
    if(PkgConfig_FOUND)
        pkg_check_modules(${ARGN})
    endif()
endmacro()
